// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { MsgUpdateScript } from "./types/blit/script/tx";
import { MsgRun } from "./types/blit/script/msgrun";
import { MsgCreateScript } from "./types/blit/script/tx";
import { Params as typeParams } from "./types";
import { Script as typeScript } from "./types";
export { MsgUpdateScript, MsgRun, MsgCreateScript };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgUpdateScript({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateScript: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
                let msg = this.msgUpdateScript({ value: MsgUpdateScript.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateScript: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRun({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRun: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
                let msg = this.msgRun({ value: MsgRun.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRun: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateScript({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateScript: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry, prefix });
                let msg = this.msgCreateScript({ value: MsgCreateScript.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateScript: Could not broadcast Tx: ' + e.message);
            }
        },
        msgUpdateScript({ value }) {
            try {
                return { typeUrl: "/blit.script.MsgUpdateScript", value: MsgUpdateScript.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateScript: Could not create message: ' + e.message);
            }
        },
        msgRun({ value }) {
            try {
                return { typeUrl: "/blit.script.MsgRun", value: MsgRun.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRun: Could not create message: ' + e.message);
            }
        },
        msgCreateScript({ value }) {
            try {
                return { typeUrl: "/blit.script.MsgCreateScript", value: MsgCreateScript.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateScript: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    query;
    tx;
    structure;
    registry = [];
    constructor(client) {
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {
            Params: getStructure(typeParams.fromPartial({})),
            Script: getStructure(typeScript.fromPartial({})),
        };
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const Module = (test) => {
    return {
        module: {
            BlitScript: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default Module;
//# sourceMappingURL=module.js.map