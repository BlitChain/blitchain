// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blit/blit/task.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Task struct {
	Index               string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	TaskId              int32  `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	TotalRunCount       int32  `protobuf:"varint,3,opt,name=totalRunCount,proto3" json:"totalRunCount,omitempty"`
	NextTaskResultIndex string `protobuf:"bytes,4,opt,name=nextTaskResultIndex,proto3" json:"nextTaskResultIndex,omitempty"`
	ActivateOn          string `protobuf:"bytes,5,opt,name=activateOn,proto3" json:"activateOn,omitempty"`
	ExpireOn            string `protobuf:"bytes,6,opt,name=expireOn,proto3" json:"expireOn,omitempty"`
	Interval            string `protobuf:"bytes,7,opt,name=interval,proto3" json:"interval,omitempty"`
	MaxRuns             int32  `protobuf:"varint,8,opt,name=maxRuns,proto3" json:"maxRuns,omitempty"`
	DisableOnError      bool   `protobuf:"varint,9,opt,name=disableOnError,proto3" json:"disableOnError,omitempty"`
	Enabled             bool   `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GasLimit            int32  `protobuf:"varint,11,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasPrice            string `protobuf:"bytes,12,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	MessagesMo          string `protobuf:"bytes,13,opt,name=messagesMo,proto3" json:"messagesMo,omitempty"`
	Dule                string `protobuf:"bytes,14,opt,name=dule,proto3" json:"dule,omitempty"`
	Blit                string `protobuf:"bytes,15,opt,name=blit,proto3" json:"blit,omitempty"`
	Creator             string `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be3d8c6b9be697, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Task) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Task) GetTotalRunCount() int32 {
	if m != nil {
		return m.TotalRunCount
	}
	return 0
}

func (m *Task) GetNextTaskResultIndex() string {
	if m != nil {
		return m.NextTaskResultIndex
	}
	return ""
}

func (m *Task) GetActivateOn() string {
	if m != nil {
		return m.ActivateOn
	}
	return ""
}

func (m *Task) GetExpireOn() string {
	if m != nil {
		return m.ExpireOn
	}
	return ""
}

func (m *Task) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *Task) GetMaxRuns() int32 {
	if m != nil {
		return m.MaxRuns
	}
	return 0
}

func (m *Task) GetDisableOnError() bool {
	if m != nil {
		return m.DisableOnError
	}
	return false
}

func (m *Task) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Task) GetGasLimit() int32 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *Task) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *Task) GetMessagesMo() string {
	if m != nil {
		return m.MessagesMo
	}
	return ""
}

func (m *Task) GetDule() string {
	if m != nil {
		return m.Dule
	}
	return ""
}

func (m *Task) GetBlit() string {
	if m != nil {
		return m.Blit
	}
	return ""
}

func (m *Task) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Task)(nil), "blit.blit.Task")
}

func init() { proto.RegisterFile("blit/blit/task.proto", fileDescriptor_86be3d8c6b9be697) }

var fileDescriptor_86be3d8c6b9be697 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xc7, 0xbb, 0xf6, 0x3b, 0xda, 0xaa, 0xb1, 0xc8, 0xe0, 0x61, 0x29, 0x22, 0x52, 0x10, 0xaa,
	0xe0, 0x1b, 0x28, 0x1e, 0x0a, 0x4a, 0x65, 0xf1, 0xe4, 0x2d, 0xed, 0x86, 0x12, 0xba, 0x4d, 0x4a,
	0x92, 0x2d, 0xeb, 0x5b, 0xf8, 0x58, 0x1e, 0x7b, 0x14, 0x4f, 0xd2, 0xbe, 0x88, 0xcc, 0x6c, 0xb7,
	0x7e, 0xe0, 0x25, 0xe4, 0xf7, 0xfb, 0x67, 0x33, 0x13, 0x76, 0x58, 0x67, 0x94, 0x28, 0x7f, 0x49,
	0x8b, 0x17, 0x6e, 0xda, 0x9f, 0x5b, 0xe3, 0x0d, 0x6f, 0xa2, 0xe8, 0xe3, 0x72, 0xfa, 0x51, 0x66,
	0x95, 0x27, 0xe1, 0xa6, 0xbc, 0xc3, 0xaa, 0x4a, 0xc7, 0x32, 0x83, 0xa0, 0x1b, 0xf4, 0x9a, 0x51,
	0x0e, 0xfc, 0x98, 0xd5, 0xf0, 0xbb, 0x41, 0x0c, 0x3b, 0xdd, 0xa0, 0x57, 0x8d, 0x36, 0xc4, 0xcf,
	0x58, 0xcb, 0x1b, 0x2f, 0x92, 0x28, 0xd5, 0xb7, 0x26, 0xd5, 0x1e, 0xca, 0x14, 0xff, 0x96, 0xfc,
	0x8a, 0x1d, 0x69, 0x99, 0x79, 0xbc, 0x3f, 0x92, 0x2e, 0x4d, 0xfc, 0x80, 0x2a, 0x54, 0xa8, 0xc2,
	0x7f, 0x11, 0x0f, 0x19, 0x13, 0x63, 0xaf, 0x16, 0xc2, 0xcb, 0xa1, 0x86, 0x2a, 0x1d, 0xfc, 0x61,
	0xf8, 0x09, 0x6b, 0xc8, 0x6c, 0xae, 0x2c, 0xa6, 0x35, 0x4a, 0xb7, 0x8c, 0x99, 0xd2, 0x5e, 0xda,
	0x85, 0x48, 0xa0, 0x9e, 0x67, 0x05, 0x73, 0x60, 0xf5, 0x99, 0xc8, 0xa2, 0x54, 0x3b, 0x68, 0x50,
	0xa7, 0x05, 0xf2, 0x73, 0xd6, 0x8e, 0x95, 0x13, 0xa3, 0x44, 0x0e, 0xf5, 0x9d, 0xb5, 0xc6, 0x42,
	0xb3, 0x1b, 0xf4, 0x1a, 0xd1, 0x1f, 0x8b, 0x37, 0x48, 0x8d, 0x22, 0x06, 0x46, 0x07, 0x0a, 0xc4,
	0xba, 0x13, 0xe1, 0xee, 0xd5, 0x4c, 0x79, 0xd8, 0xa5, 0xcb, 0xb7, 0xbc, 0xc9, 0x1e, 0xad, 0x1a,
	0x4b, 0xd8, 0xcb, 0x7b, 0x2a, 0x18, 0xdf, 0x3a, 0x93, 0xce, 0x89, 0x89, 0x74, 0x0f, 0x06, 0x5a,
	0xf9, 0x5b, 0xbf, 0x0d, 0xe7, 0xac, 0x12, 0xa7, 0x89, 0x84, 0x36, 0x25, 0xb4, 0x47, 0x87, 0xbf,
	0x0d, 0xf6, 0x73, 0x87, 0x7b, 0xec, 0x6c, 0x6c, 0xa5, 0xf0, 0xc6, 0xc2, 0x01, 0xe9, 0x02, 0x6f,
	0x2e, 0xde, 0x56, 0x61, 0xb0, 0x5c, 0x85, 0xc1, 0xe7, 0x2a, 0x0c, 0x5e, 0xd7, 0x61, 0x69, 0xb9,
	0x0e, 0x4b, 0xef, 0xeb, 0xb0, 0xf4, 0x7c, 0x48, 0x23, 0x91, 0x6d, 0x26, 0xe3, 0x65, 0x2e, 0xdd,
	0xa8, 0x46, 0xb3, 0x71, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x3d, 0xeb, 0x95, 0x33, 0x02,
	0x00, 0x00,
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Blit) > 0 {
		i -= len(m.Blit)
		copy(dAtA[i:], m.Blit)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Blit)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Dule) > 0 {
		i -= len(m.Dule)
		copy(dAtA[i:], m.Dule)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Dule)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MessagesMo) > 0 {
		i -= len(m.MessagesMo)
		copy(dAtA[i:], m.MessagesMo)
		i = encodeVarintTask(dAtA, i, uint64(len(m.MessagesMo)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.GasPrice) > 0 {
		i -= len(m.GasPrice)
		copy(dAtA[i:], m.GasPrice)
		i = encodeVarintTask(dAtA, i, uint64(len(m.GasPrice)))
		i--
		dAtA[i] = 0x62
	}
	if m.GasLimit != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x58
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.DisableOnError {
		i--
		if m.DisableOnError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.MaxRuns != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.MaxRuns))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Interval) > 0 {
		i -= len(m.Interval)
		copy(dAtA[i:], m.Interval)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Interval)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExpireOn) > 0 {
		i -= len(m.ExpireOn)
		copy(dAtA[i:], m.ExpireOn)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ExpireOn)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ActivateOn) > 0 {
		i -= len(m.ActivateOn)
		copy(dAtA[i:], m.ActivateOn)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ActivateOn)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NextTaskResultIndex) > 0 {
		i -= len(m.NextTaskResultIndex)
		copy(dAtA[i:], m.NextTaskResultIndex)
		i = encodeVarintTask(dAtA, i, uint64(len(m.NextTaskResultIndex)))
		i--
		dAtA[i] = 0x22
	}
	if m.TotalRunCount != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TotalRunCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TaskId != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovTask(uint64(m.TaskId))
	}
	if m.TotalRunCount != 0 {
		n += 1 + sovTask(uint64(m.TotalRunCount))
	}
	l = len(m.NextTaskResultIndex)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.ActivateOn)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.ExpireOn)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.MaxRuns != 0 {
		n += 1 + sovTask(uint64(m.MaxRuns))
	}
	if m.DisableOnError {
		n += 2
	}
	if m.Enabled {
		n += 2
	}
	if m.GasLimit != 0 {
		n += 1 + sovTask(uint64(m.GasLimit))
	}
	l = len(m.GasPrice)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.MessagesMo)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Dule)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Blit)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRunCount", wireType)
			}
			m.TotalRunCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRunCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTaskResultIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextTaskResultIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateOn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivateOn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireOn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireOn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRuns", wireType)
			}
			m.MaxRuns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRuns |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOnError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableOnError = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesMo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessagesMo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
