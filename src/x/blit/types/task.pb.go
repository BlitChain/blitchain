// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blit/blit/task.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Tasks are like cron jobs that can be scheduled to run at a specific time or
// interval.
type Task struct {
	Creator         string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id              uint64          `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	ActivateAfter   time.Time       `protobuf:"bytes,5,opt,name=activate_after,json=activateAfter,proto3,stdtime" json:"activate_after"`
	ExpireAfter     time.Time       `protobuf:"bytes,6,opt,name=expire_after,json=expireAfter,proto3,stdtime" json:"expire_after"`
	MinimumInterval *time.Duration  `protobuf:"bytes,7,opt,name=minimum_interval,json=minimumInterval,proto3,stdduration" json:"minimum_interval,omitempty"`
	MaxRuns         uint64          `protobuf:"varint,9,opt,name=max_runs,json=maxRuns,proto3" json:"max_runs,omitempty"`
	DisableOnError  bool            `protobuf:"varint,10,opt,name=disable_on_error,json=disableOnError,proto3" json:"disable_on_error,omitempty"`
	Enabled         bool            `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TaskGasLimit    uint64          `protobuf:"varint,12,opt,name=task_gas_limit,json=taskGasLimit,proto3" json:"task_gas_limit,omitempty"`
	TaskGasFee      types.Coin      `protobuf:"bytes,13,opt,name=task_gas_fee,json=taskGasFee,proto3" json:"task_gas_fee"`
	Messages        []*types1.Any   `protobuf:"bytes,14,rep,name=messages,proto3" json:"messages,omitempty"`
	Results         []*types.Result `protobuf:"bytes,15,rep,name=results,proto3" json:"results,omitempty"`
	LastExecutedOn  *time.Time      `protobuf:"bytes,16,opt,name=last_executed_on,json=lastExecutedOn,proto3,stdtime" json:"last_executed_on,omitempty"`
	ErrorLog        string          `protobuf:"bytes,17,opt,name=error_log,json=errorLog,proto3" json:"error_log,omitempty"`
	FutureTaskIndex string          `protobuf:"bytes,18,opt,name=future_task_index,json=futureTaskIndex,proto3" json:"future_task_index,omitempty"`
	TotalRuns       uint64          `protobuf:"varint,19,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be3d8c6b9be697, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Task) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetActivateAfter() time.Time {
	if m != nil {
		return m.ActivateAfter
	}
	return time.Time{}
}

func (m *Task) GetExpireAfter() time.Time {
	if m != nil {
		return m.ExpireAfter
	}
	return time.Time{}
}

func (m *Task) GetMinimumInterval() *time.Duration {
	if m != nil {
		return m.MinimumInterval
	}
	return nil
}

func (m *Task) GetMaxRuns() uint64 {
	if m != nil {
		return m.MaxRuns
	}
	return 0
}

func (m *Task) GetDisableOnError() bool {
	if m != nil {
		return m.DisableOnError
	}
	return false
}

func (m *Task) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Task) GetTaskGasLimit() uint64 {
	if m != nil {
		return m.TaskGasLimit
	}
	return 0
}

func (m *Task) GetTaskGasFee() types.Coin {
	if m != nil {
		return m.TaskGasFee
	}
	return types.Coin{}
}

func (m *Task) GetMessages() []*types1.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Task) GetResults() []*types.Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Task) GetLastExecutedOn() *time.Time {
	if m != nil {
		return m.LastExecutedOn
	}
	return nil
}

func (m *Task) GetErrorLog() string {
	if m != nil {
		return m.ErrorLog
	}
	return ""
}

func (m *Task) GetFutureTaskIndex() string {
	if m != nil {
		return m.FutureTaskIndex
	}
	return ""
}

func (m *Task) GetTotalRuns() uint64 {
	if m != nil {
		return m.TotalRuns
	}
	return 0
}

func init() {
	proto.RegisterType((*Task)(nil), "blit.blit.Task")
}

func init() { proto.RegisterFile("blit/blit/task.proto", fileDescriptor_86be3d8c6b9be697) }

var fileDescriptor_86be3d8c6b9be697 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x6d, 0x46, 0x59, 0x5b, 0xb7, 0xeb, 0x36, 0xd3, 0x83, 0xb7, 0x89, 0xac, 0x02, 0x0e, 0x15,
	0x88, 0x84, 0x8d, 0x1b, 0xb7, 0x16, 0xc6, 0x34, 0x98, 0x34, 0x29, 0xec, 0xc4, 0x25, 0x72, 0x9a,
	0xaf, 0x91, 0xb5, 0xc4, 0xae, 0x6c, 0x67, 0xea, 0xfe, 0xc5, 0x4e, 0x88, 0x1f, 0xc2, 0x8f, 0xd8,
	0x71, 0xe2, 0xc4, 0x09, 0xd0, 0xf6, 0x47, 0x90, 0x1d, 0x67, 0x62, 0xdb, 0x01, 0x71, 0x89, 0xe2,
	0xf7, 0xbd, 0xf7, 0x6c, 0x7f, 0xef, 0x33, 0x1a, 0x24, 0x39, 0xd3, 0xa1, 0xfd, 0x68, 0xaa, 0x4e,
	0x82, 0xb9, 0x14, 0x5a, 0xe0, 0x8e, 0x01, 0x02, 0xf3, 0xd9, 0x7c, 0x3a, 0x15, 0xaa, 0x10, 0x2a,
	0x4c, 0xa8, 0x82, 0x90, 0x26, 0x53, 0x16, 0x9e, 0xee, 0x24, 0xa0, 0xe9, 0x8e, 0x5d, 0x54, 0xfc,
	0x4d, 0x3f, 0x13, 0x22, 0xcb, 0x21, 0xb4, 0xab, 0xa4, 0x9c, 0x85, 0x69, 0x29, 0xa9, 0x66, 0x82,
	0xd7, 0xf5, 0xbf, 0x4d, 0x6a, 0xfd, 0x54, 0xb0, 0xba, 0x3e, 0xc8, 0x44, 0x26, 0xec, 0x6f, 0x68,
	0xfe, 0x1c, 0xba, 0x7d, 0xd7, 0x55, 0xb3, 0x02, 0x94, 0xa6, 0xc5, 0xdc, 0x11, 0x36, 0xee, 0x12,
	0x28, 0x3f, 0xab, 0x4b, 0xd5, 0x8e, 0x71, 0x65, 0x5a, 0x2d, 0x5c, 0x69, 0xeb, 0xf6, 0x95, 0x63,
	0x09, 0xaa, 0xcc, 0x75, 0x55, 0x7c, 0xf2, 0x65, 0x19, 0x35, 0x8f, 0xa9, 0x3a, 0xc1, 0xbb, 0xa8,
	0x35, 0x95, 0x40, 0xb5, 0x90, 0xc4, 0x1b, 0x7a, 0xa3, 0xce, 0x84, 0x7c, 0xff, 0xf6, 0x72, 0xe0,
	0x8c, 0xc6, 0x69, 0x2a, 0x41, 0xa9, 0x4f, 0x5a, 0x32, 0x9e, 0x45, 0x35, 0x11, 0xf7, 0xd1, 0x12,
	0x4b, 0x49, 0x73, 0xe8, 0x8d, 0x9a, 0xd1, 0x12, 0x4b, 0xf1, 0x47, 0xd4, 0xa7, 0x53, 0xcd, 0x4e,
	0xa9, 0x86, 0x98, 0xce, 0x34, 0x48, 0xf2, 0x70, 0xe8, 0x8d, 0xba, 0xbb, 0x9b, 0x41, 0x75, 0xf0,
	0xa0, 0x3e, 0x78, 0x70, 0x5c, 0xdf, 0x6c, 0xd2, 0xbe, 0xf8, 0xb9, 0xdd, 0x38, 0xff, 0xb5, 0xed,
	0x45, 0x2b, 0xb5, 0x76, 0x6c, 0xa4, 0x78, 0x1f, 0xf5, 0x60, 0x31, 0x67, 0xb2, 0xb6, 0x5a, 0xfe,
	0x0f, 0xab, 0x6e, 0xa5, 0xac, 0x8c, 0x3e, 0xa0, 0xb5, 0x82, 0x71, 0x56, 0x94, 0x45, 0xcc, 0xb8,
	0x06, 0x79, 0x4a, 0x73, 0xd2, 0xb2, 0x66, 0x1b, 0xf7, 0xcc, 0xde, 0xb9, 0x1c, 0x27, 0xcd, 0xaf,
	0xc6, 0x67, 0xd5, 0x09, 0x0f, 0x9c, 0x0e, 0x6f, 0xa0, 0x76, 0x41, 0x17, 0xb1, 0x2c, 0xb9, 0x22,
	0x1d, 0x7b, 0xef, 0x56, 0x41, 0x17, 0x51, 0xc9, 0x15, 0x1e, 0xa1, 0xb5, 0x94, 0x29, 0x9a, 0xe4,
	0x10, 0x0b, 0x1e, 0x83, 0x94, 0x42, 0x12, 0x34, 0xf4, 0x46, 0xed, 0xa8, 0xef, 0xf0, 0x23, 0xbe,
	0x67, 0x50, 0x4c, 0x50, 0x0b, 0xb8, 0x01, 0x52, 0xd2, 0xb5, 0x84, 0x7a, 0x89, 0x9f, 0xa1, 0xbe,
	0x8d, 0x28, 0xa3, 0x2a, 0xce, 0x59, 0xc1, 0x34, 0xe9, 0xd9, 0x4d, 0x7a, 0x06, 0xdd, 0xa7, 0xea,
	0xd0, 0x60, 0x78, 0x8c, 0x7a, 0x37, 0xac, 0x19, 0x00, 0x59, 0x71, 0x97, 0x71, 0x61, 0x99, 0xa1,
	0x0b, 0xdc, 0xd0, 0x05, 0x6f, 0x05, 0xe3, 0x93, 0xa6, 0x69, 0x4c, 0x84, 0x9c, 0xc9, 0x7b, 0x00,
	0xfc, 0x0a, 0xb5, 0x0b, 0x50, 0x8a, 0x66, 0xa0, 0x48, 0x7f, 0xf8, 0x60, 0xd4, 0xdd, 0x1d, 0xdc,
	0xeb, 0xc5, 0x98, 0x9f, 0x45, 0x37, 0x2c, 0xfc, 0x06, 0xb5, 0xaa, 0xc1, 0x51, 0x64, 0xd5, 0x0a,
	0x86, 0xb7, 0xf6, 0xb3, 0x8f, 0xa3, 0xde, 0x34, 0xb2, 0xc4, 0xa8, 0x16, 0x98, 0x04, 0x72, 0xaa,
	0x74, 0x0c, 0x0b, 0x98, 0x96, 0x1a, 0xd2, 0x58, 0x70, 0xb2, 0xf6, 0xcf, 0x38, 0x9b, 0x36, 0xca,
	0xbe, 0x51, 0xee, 0x39, 0xe1, 0x11, 0xc7, 0x5b, 0xa8, 0x63, 0x7b, 0x1b, 0xe7, 0x22, 0x23, 0xeb,
	0x66, 0x52, 0xa3, 0xb6, 0x05, 0x0e, 0x45, 0x86, 0x9f, 0xa3, 0xf5, 0x59, 0xa9, 0x4b, 0x09, 0xb1,
	0x6d, 0x10, 0xe3, 0x29, 0x2c, 0x08, 0xb6, 0xa4, 0xd5, 0xaa, 0x60, 0x66, 0xfd, 0xc0, 0xc0, 0xf8,
	0x31, 0x42, 0x5a, 0x68, 0x9a, 0x57, 0x61, 0x3e, 0xb2, 0x7d, 0xee, 0x58, 0xc4, 0xc4, 0x39, 0x79,
	0x71, 0x71, 0xe5, 0x7b, 0x97, 0x57, 0xbe, 0xf7, 0xfb, 0xca, 0xf7, 0xce, 0xaf, 0xfd, 0xc6, 0xe5,
	0xb5, 0xdf, 0xf8, 0x71, 0xed, 0x37, 0x3e, 0xaf, 0xdb, 0xa7, 0xb4, 0x70, 0x2f, 0xea, 0x6c, 0x0e,
	0x2a, 0x59, 0xb6, 0xc7, 0x7f, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x2d, 0xfd, 0xb5, 0x5e,
	0x04, 0x00, 0x00,
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalRuns != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TotalRuns))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.FutureTaskIndex) > 0 {
		i -= len(m.FutureTaskIndex)
		copy(dAtA[i:], m.FutureTaskIndex)
		i = encodeVarintTask(dAtA, i, uint64(len(m.FutureTaskIndex)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ErrorLog) > 0 {
		i -= len(m.ErrorLog)
		copy(dAtA[i:], m.ErrorLog)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ErrorLog)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.LastExecutedOn != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastExecutedOn, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastExecutedOn):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTask(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTask(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	{
		size, err := m.TaskGasFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTask(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.TaskGasLimit != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.TaskGasLimit))
		i--
		dAtA[i] = 0x60
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.DisableOnError {
		i--
		if m.DisableOnError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.MaxRuns != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.MaxRuns))
		i--
		dAtA[i] = 0x48
	}
	if m.MinimumInterval != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.MinimumInterval, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MinimumInterval):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTask(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x3a
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExpireAfter, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpireAfter):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTask(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ActivateAfter, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ActivateAfter):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTask(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x2a
	if m.Id != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ActivateAfter)
	n += 1 + l + sovTask(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpireAfter)
	n += 1 + l + sovTask(uint64(l))
	if m.MinimumInterval != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MinimumInterval)
		n += 1 + l + sovTask(uint64(l))
	}
	if m.MaxRuns != 0 {
		n += 1 + sovTask(uint64(m.MaxRuns))
	}
	if m.DisableOnError {
		n += 2
	}
	if m.Enabled {
		n += 2
	}
	if m.TaskGasLimit != 0 {
		n += 1 + sovTask(uint64(m.TaskGasLimit))
	}
	l = m.TaskGasFee.Size()
	n += 1 + l + sovTask(uint64(l))
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.LastExecutedOn != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastExecutedOn)
		n += 2 + l + sovTask(uint64(l))
	}
	l = len(m.ErrorLog)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	l = len(m.FutureTaskIndex)
	if l > 0 {
		n += 2 + l + sovTask(uint64(l))
	}
	if m.TotalRuns != 0 {
		n += 2 + sovTask(uint64(m.TotalRuns))
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ActivateAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAfter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExpireAfter, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimumInterval == nil {
				m.MinimumInterval = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.MinimumInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRuns", wireType)
			}
			m.MaxRuns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRuns |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableOnError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableOnError = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGasLimit", wireType)
			}
			m.TaskGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGasFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaskGasFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types1.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &types.Result{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastExecutedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastExecutedOn == nil {
				m.LastExecutedOn = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastExecutedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorLog", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorLog = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureTaskIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FutureTaskIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRuns", wireType)
			}
			m.TotalRuns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRuns |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
