// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package blit

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/abci/v1beta1"
	v1beta11 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Task_14_list)(nil)

type _Task_14_list struct {
	list *[]*anypb.Any
}

func (x *_Task_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Task_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Task_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	(*x.list)[i] = concreteValue
}

func (x *_Task_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*anypb.Any)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Task_14_list) AppendMutable() protoreflect.Value {
	v := new(anypb.Any)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_14_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Task_14_list) NewElement() protoreflect.Value {
	v := new(anypb.Any)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_14_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Task_15_list)(nil)

type _Task_15_list struct {
	list *[]*v1beta1.Result
}

func (x *_Task_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Task_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Task_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Result)
	(*x.list)[i] = concreteValue
}

func (x *_Task_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Result)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Task_15_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Result)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Task_15_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Result)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Task_15_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Task                   protoreflect.MessageDescriptor
	fd_Task_creator           protoreflect.FieldDescriptor
	fd_Task_id                protoreflect.FieldDescriptor
	fd_Task_activate_after    protoreflect.FieldDescriptor
	fd_Task_expire_after      protoreflect.FieldDescriptor
	fd_Task_minimum_interval  protoreflect.FieldDescriptor
	fd_Task_max_runs          protoreflect.FieldDescriptor
	fd_Task_disable_on_error  protoreflect.FieldDescriptor
	fd_Task_enabled           protoreflect.FieldDescriptor
	fd_Task_task_gas_limit    protoreflect.FieldDescriptor
	fd_Task_task_gas_fee      protoreflect.FieldDescriptor
	fd_Task_messages          protoreflect.FieldDescriptor
	fd_Task_results           protoreflect.FieldDescriptor
	fd_Task_last_executed_on  protoreflect.FieldDescriptor
	fd_Task_error_log         protoreflect.FieldDescriptor
	fd_Task_future_task_index protoreflect.FieldDescriptor
	fd_Task_total_runs        protoreflect.FieldDescriptor
)

func init() {
	file_blit_blit_task_proto_init()
	md_Task = File_blit_blit_task_proto.Messages().ByName("Task")
	fd_Task_creator = md_Task.Fields().ByName("creator")
	fd_Task_id = md_Task.Fields().ByName("id")
	fd_Task_activate_after = md_Task.Fields().ByName("activate_after")
	fd_Task_expire_after = md_Task.Fields().ByName("expire_after")
	fd_Task_minimum_interval = md_Task.Fields().ByName("minimum_interval")
	fd_Task_max_runs = md_Task.Fields().ByName("max_runs")
	fd_Task_disable_on_error = md_Task.Fields().ByName("disable_on_error")
	fd_Task_enabled = md_Task.Fields().ByName("enabled")
	fd_Task_task_gas_limit = md_Task.Fields().ByName("task_gas_limit")
	fd_Task_task_gas_fee = md_Task.Fields().ByName("task_gas_fee")
	fd_Task_messages = md_Task.Fields().ByName("messages")
	fd_Task_results = md_Task.Fields().ByName("results")
	fd_Task_last_executed_on = md_Task.Fields().ByName("last_executed_on")
	fd_Task_error_log = md_Task.Fields().ByName("error_log")
	fd_Task_future_task_index = md_Task.Fields().ByName("future_task_index")
	fd_Task_total_runs = md_Task.Fields().ByName("total_runs")
}

var _ protoreflect.Message = (*fastReflection_Task)(nil)

type fastReflection_Task Task

func (x *Task) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Task)(x)
}

func (x *Task) slowProtoReflect() protoreflect.Message {
	mi := &file_blit_blit_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Task_messageType fastReflection_Task_messageType
var _ protoreflect.MessageType = fastReflection_Task_messageType{}

type fastReflection_Task_messageType struct{}

func (x fastReflection_Task_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Task)(nil)
}
func (x fastReflection_Task_messageType) New() protoreflect.Message {
	return new(fastReflection_Task)
}
func (x fastReflection_Task_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Task
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Task) Descriptor() protoreflect.MessageDescriptor {
	return md_Task
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Task) Type() protoreflect.MessageType {
	return _fastReflection_Task_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Task) New() protoreflect.Message {
	return new(fastReflection_Task)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Task) Interface() protoreflect.ProtoMessage {
	return (*Task)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Task) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Task_creator, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Task_id, value) {
			return
		}
	}
	if x.ActivateAfter != nil {
		value := protoreflect.ValueOfMessage(x.ActivateAfter.ProtoReflect())
		if !f(fd_Task_activate_after, value) {
			return
		}
	}
	if x.ExpireAfter != nil {
		value := protoreflect.ValueOfMessage(x.ExpireAfter.ProtoReflect())
		if !f(fd_Task_expire_after, value) {
			return
		}
	}
	if x.MinimumInterval != nil {
		value := protoreflect.ValueOfMessage(x.MinimumInterval.ProtoReflect())
		if !f(fd_Task_minimum_interval, value) {
			return
		}
	}
	if x.MaxRuns != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxRuns)
		if !f(fd_Task_max_runs, value) {
			return
		}
	}
	if x.DisableOnError != false {
		value := protoreflect.ValueOfBool(x.DisableOnError)
		if !f(fd_Task_disable_on_error, value) {
			return
		}
	}
	if x.Enabled != false {
		value := protoreflect.ValueOfBool(x.Enabled)
		if !f(fd_Task_enabled, value) {
			return
		}
	}
	if x.TaskGasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TaskGasLimit)
		if !f(fd_Task_task_gas_limit, value) {
			return
		}
	}
	if x.TaskGasFee != nil {
		value := protoreflect.ValueOfMessage(x.TaskGasFee.ProtoReflect())
		if !f(fd_Task_task_gas_fee, value) {
			return
		}
	}
	if len(x.Messages) != 0 {
		value := protoreflect.ValueOfList(&_Task_14_list{list: &x.Messages})
		if !f(fd_Task_messages, value) {
			return
		}
	}
	if len(x.Results) != 0 {
		value := protoreflect.ValueOfList(&_Task_15_list{list: &x.Results})
		if !f(fd_Task_results, value) {
			return
		}
	}
	if x.LastExecutedOn != nil {
		value := protoreflect.ValueOfMessage(x.LastExecutedOn.ProtoReflect())
		if !f(fd_Task_last_executed_on, value) {
			return
		}
	}
	if x.ErrorLog != "" {
		value := protoreflect.ValueOfString(x.ErrorLog)
		if !f(fd_Task_error_log, value) {
			return
		}
	}
	if x.FutureTaskIndex != "" {
		value := protoreflect.ValueOfString(x.FutureTaskIndex)
		if !f(fd_Task_future_task_index, value) {
			return
		}
	}
	if x.TotalRuns != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalRuns)
		if !f(fd_Task_total_runs, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Task) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "blit.blit.Task.creator":
		return x.Creator != ""
	case "blit.blit.Task.id":
		return x.Id != uint64(0)
	case "blit.blit.Task.activate_after":
		return x.ActivateAfter != nil
	case "blit.blit.Task.expire_after":
		return x.ExpireAfter != nil
	case "blit.blit.Task.minimum_interval":
		return x.MinimumInterval != nil
	case "blit.blit.Task.max_runs":
		return x.MaxRuns != uint64(0)
	case "blit.blit.Task.disable_on_error":
		return x.DisableOnError != false
	case "blit.blit.Task.enabled":
		return x.Enabled != false
	case "blit.blit.Task.task_gas_limit":
		return x.TaskGasLimit != uint64(0)
	case "blit.blit.Task.task_gas_fee":
		return x.TaskGasFee != nil
	case "blit.blit.Task.messages":
		return len(x.Messages) != 0
	case "blit.blit.Task.results":
		return len(x.Results) != 0
	case "blit.blit.Task.last_executed_on":
		return x.LastExecutedOn != nil
	case "blit.blit.Task.error_log":
		return x.ErrorLog != ""
	case "blit.blit.Task.future_task_index":
		return x.FutureTaskIndex != ""
	case "blit.blit.Task.total_runs":
		return x.TotalRuns != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "blit.blit.Task.creator":
		x.Creator = ""
	case "blit.blit.Task.id":
		x.Id = uint64(0)
	case "blit.blit.Task.activate_after":
		x.ActivateAfter = nil
	case "blit.blit.Task.expire_after":
		x.ExpireAfter = nil
	case "blit.blit.Task.minimum_interval":
		x.MinimumInterval = nil
	case "blit.blit.Task.max_runs":
		x.MaxRuns = uint64(0)
	case "blit.blit.Task.disable_on_error":
		x.DisableOnError = false
	case "blit.blit.Task.enabled":
		x.Enabled = false
	case "blit.blit.Task.task_gas_limit":
		x.TaskGasLimit = uint64(0)
	case "blit.blit.Task.task_gas_fee":
		x.TaskGasFee = nil
	case "blit.blit.Task.messages":
		x.Messages = nil
	case "blit.blit.Task.results":
		x.Results = nil
	case "blit.blit.Task.last_executed_on":
		x.LastExecutedOn = nil
	case "blit.blit.Task.error_log":
		x.ErrorLog = ""
	case "blit.blit.Task.future_task_index":
		x.FutureTaskIndex = ""
	case "blit.blit.Task.total_runs":
		x.TotalRuns = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Task) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "blit.blit.Task.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "blit.blit.Task.activate_after":
		value := x.ActivateAfter
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "blit.blit.Task.expire_after":
		value := x.ExpireAfter
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "blit.blit.Task.minimum_interval":
		value := x.MinimumInterval
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "blit.blit.Task.max_runs":
		value := x.MaxRuns
		return protoreflect.ValueOfUint64(value)
	case "blit.blit.Task.disable_on_error":
		value := x.DisableOnError
		return protoreflect.ValueOfBool(value)
	case "blit.blit.Task.enabled":
		value := x.Enabled
		return protoreflect.ValueOfBool(value)
	case "blit.blit.Task.task_gas_limit":
		value := x.TaskGasLimit
		return protoreflect.ValueOfUint64(value)
	case "blit.blit.Task.task_gas_fee":
		value := x.TaskGasFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "blit.blit.Task.messages":
		if len(x.Messages) == 0 {
			return protoreflect.ValueOfList(&_Task_14_list{})
		}
		listValue := &_Task_14_list{list: &x.Messages}
		return protoreflect.ValueOfList(listValue)
	case "blit.blit.Task.results":
		if len(x.Results) == 0 {
			return protoreflect.ValueOfList(&_Task_15_list{})
		}
		listValue := &_Task_15_list{list: &x.Results}
		return protoreflect.ValueOfList(listValue)
	case "blit.blit.Task.last_executed_on":
		value := x.LastExecutedOn
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "blit.blit.Task.error_log":
		value := x.ErrorLog
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.future_task_index":
		value := x.FutureTaskIndex
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.total_runs":
		value := x.TotalRuns
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "blit.blit.Task.creator":
		x.Creator = value.Interface().(string)
	case "blit.blit.Task.id":
		x.Id = value.Uint()
	case "blit.blit.Task.activate_after":
		x.ActivateAfter = value.Message().Interface().(*timestamppb.Timestamp)
	case "blit.blit.Task.expire_after":
		x.ExpireAfter = value.Message().Interface().(*timestamppb.Timestamp)
	case "blit.blit.Task.minimum_interval":
		x.MinimumInterval = value.Message().Interface().(*durationpb.Duration)
	case "blit.blit.Task.max_runs":
		x.MaxRuns = value.Uint()
	case "blit.blit.Task.disable_on_error":
		x.DisableOnError = value.Bool()
	case "blit.blit.Task.enabled":
		x.Enabled = value.Bool()
	case "blit.blit.Task.task_gas_limit":
		x.TaskGasLimit = value.Uint()
	case "blit.blit.Task.task_gas_fee":
		x.TaskGasFee = value.Message().Interface().(*v1beta11.Coin)
	case "blit.blit.Task.messages":
		lv := value.List()
		clv := lv.(*_Task_14_list)
		x.Messages = *clv.list
	case "blit.blit.Task.results":
		lv := value.List()
		clv := lv.(*_Task_15_list)
		x.Results = *clv.list
	case "blit.blit.Task.last_executed_on":
		x.LastExecutedOn = value.Message().Interface().(*timestamppb.Timestamp)
	case "blit.blit.Task.error_log":
		x.ErrorLog = value.Interface().(string)
	case "blit.blit.Task.future_task_index":
		x.FutureTaskIndex = value.Interface().(string)
	case "blit.blit.Task.total_runs":
		x.TotalRuns = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "blit.blit.Task.activate_after":
		if x.ActivateAfter == nil {
			x.ActivateAfter = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ActivateAfter.ProtoReflect())
	case "blit.blit.Task.expire_after":
		if x.ExpireAfter == nil {
			x.ExpireAfter = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ExpireAfter.ProtoReflect())
	case "blit.blit.Task.minimum_interval":
		if x.MinimumInterval == nil {
			x.MinimumInterval = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.MinimumInterval.ProtoReflect())
	case "blit.blit.Task.task_gas_fee":
		if x.TaskGasFee == nil {
			x.TaskGasFee = new(v1beta11.Coin)
		}
		return protoreflect.ValueOfMessage(x.TaskGasFee.ProtoReflect())
	case "blit.blit.Task.messages":
		if x.Messages == nil {
			x.Messages = []*anypb.Any{}
		}
		value := &_Task_14_list{list: &x.Messages}
		return protoreflect.ValueOfList(value)
	case "blit.blit.Task.results":
		if x.Results == nil {
			x.Results = []*v1beta1.Result{}
		}
		value := &_Task_15_list{list: &x.Results}
		return protoreflect.ValueOfList(value)
	case "blit.blit.Task.last_executed_on":
		if x.LastExecutedOn == nil {
			x.LastExecutedOn = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastExecutedOn.ProtoReflect())
	case "blit.blit.Task.creator":
		panic(fmt.Errorf("field creator of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.id":
		panic(fmt.Errorf("field id of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.max_runs":
		panic(fmt.Errorf("field max_runs of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.disable_on_error":
		panic(fmt.Errorf("field disable_on_error of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.enabled":
		panic(fmt.Errorf("field enabled of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.task_gas_limit":
		panic(fmt.Errorf("field task_gas_limit of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.error_log":
		panic(fmt.Errorf("field error_log of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.future_task_index":
		panic(fmt.Errorf("field future_task_index of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.total_runs":
		panic(fmt.Errorf("field total_runs of message blit.blit.Task is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Task) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "blit.blit.Task.creator":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "blit.blit.Task.activate_after":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "blit.blit.Task.expire_after":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "blit.blit.Task.minimum_interval":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "blit.blit.Task.max_runs":
		return protoreflect.ValueOfUint64(uint64(0))
	case "blit.blit.Task.disable_on_error":
		return protoreflect.ValueOfBool(false)
	case "blit.blit.Task.enabled":
		return protoreflect.ValueOfBool(false)
	case "blit.blit.Task.task_gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "blit.blit.Task.task_gas_fee":
		m := new(v1beta11.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "blit.blit.Task.messages":
		list := []*anypb.Any{}
		return protoreflect.ValueOfList(&_Task_14_list{list: &list})
	case "blit.blit.Task.results":
		list := []*v1beta1.Result{}
		return protoreflect.ValueOfList(&_Task_15_list{list: &list})
	case "blit.blit.Task.last_executed_on":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "blit.blit.Task.error_log":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.future_task_index":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.total_runs":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Task) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in blit.blit.Task", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Task) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Task) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Task) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.ActivateAfter != nil {
			l = options.Size(x.ActivateAfter)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ExpireAfter != nil {
			l = options.Size(x.ExpireAfter)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MinimumInterval != nil {
			l = options.Size(x.MinimumInterval)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxRuns != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxRuns))
		}
		if x.DisableOnError {
			n += 2
		}
		if x.Enabled {
			n += 2
		}
		if x.TaskGasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.TaskGasLimit))
		}
		if x.TaskGasFee != nil {
			l = options.Size(x.TaskGasFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Messages) > 0 {
			for _, e := range x.Messages {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Results) > 0 {
			for _, e := range x.Results {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.LastExecutedOn != nil {
			l = options.Size(x.LastExecutedOn)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ErrorLog)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FutureTaskIndex)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.TotalRuns != 0 {
			n += 2 + runtime.Sov(uint64(x.TotalRuns))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TotalRuns != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalRuns))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if len(x.FutureTaskIndex) > 0 {
			i -= len(x.FutureTaskIndex)
			copy(dAtA[i:], x.FutureTaskIndex)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FutureTaskIndex)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if len(x.ErrorLog) > 0 {
			i -= len(x.ErrorLog)
			copy(dAtA[i:], x.ErrorLog)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ErrorLog)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if x.LastExecutedOn != nil {
			encoded, err := options.Marshal(x.LastExecutedOn)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.Results) > 0 {
			for iNdEx := len(x.Results) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Results[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.Messages) > 0 {
			for iNdEx := len(x.Messages) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Messages[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x72
			}
		}
		if x.TaskGasFee != nil {
			encoded, err := options.Marshal(x.TaskGasFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x6a
		}
		if x.TaskGasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TaskGasLimit))
			i--
			dAtA[i] = 0x60
		}
		if x.Enabled {
			i--
			if x.Enabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x58
		}
		if x.DisableOnError {
			i--
			if x.DisableOnError {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x50
		}
		if x.MaxRuns != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxRuns))
			i--
			dAtA[i] = 0x48
		}
		if x.MinimumInterval != nil {
			encoded, err := options.Marshal(x.MinimumInterval)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.ExpireAfter != nil {
			encoded, err := options.Marshal(x.ExpireAfter)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.ActivateAfter != nil {
			encoded, err := options.Marshal(x.ActivateAfter)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Task: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActivateAfter", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ActivateAfter == nil {
					x.ActivateAfter = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ActivateAfter); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpireAfter", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExpireAfter == nil {
					x.ExpireAfter = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExpireAfter); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinimumInterval", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MinimumInterval == nil {
					x.MinimumInterval = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MinimumInterval); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxRuns", wireType)
				}
				x.MaxRuns = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxRuns |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisableOnError", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DisableOnError = bool(v != 0)
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Enabled = bool(v != 0)
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskGasLimit", wireType)
				}
				x.TaskGasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TaskGasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskGasFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TaskGasFee == nil {
					x.TaskGasFee = &v1beta11.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TaskGasFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Messages = append(x.Messages, &anypb.Any{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Messages[len(x.Messages)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Results = append(x.Results, &v1beta1.Result{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Results[len(x.Results)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastExecutedOn", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastExecutedOn == nil {
					x.LastExecutedOn = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastExecutedOn); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ErrorLog", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ErrorLog = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FutureTaskIndex", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FutureTaskIndex = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalRuns", wireType)
				}
				x.TotalRuns = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalRuns |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: blit/blit/task.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tasks are like cron jobs that can be scheduled to run at a specific time or
// interval.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator         string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id              uint64                 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	ActivateAfter   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=activate_after,json=activateAfter,proto3" json:"activate_after,omitempty"`
	ExpireAfter     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_after,json=expireAfter,proto3" json:"expire_after,omitempty"`
	MinimumInterval *durationpb.Duration   `protobuf:"bytes,7,opt,name=minimum_interval,json=minimumInterval,proto3" json:"minimum_interval,omitempty"`
	MaxRuns         uint64                 `protobuf:"varint,9,opt,name=max_runs,json=maxRuns,proto3" json:"max_runs,omitempty"`
	DisableOnError  bool                   `protobuf:"varint,10,opt,name=disable_on_error,json=disableOnError,proto3" json:"disable_on_error,omitempty"`
	Enabled         bool                   `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`
	TaskGasLimit    uint64                 `protobuf:"varint,12,opt,name=task_gas_limit,json=taskGasLimit,proto3" json:"task_gas_limit,omitempty"`
	TaskGasFee      *v1beta11.Coin         `protobuf:"bytes,13,opt,name=task_gas_fee,json=taskGasFee,proto3" json:"task_gas_fee,omitempty"`
	Messages        []*anypb.Any           `protobuf:"bytes,14,rep,name=messages,proto3" json:"messages,omitempty"`
	Results         []*v1beta1.Result      `protobuf:"bytes,15,rep,name=results,proto3" json:"results,omitempty"`
	LastExecutedOn  *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=last_executed_on,json=lastExecutedOn,proto3" json:"last_executed_on,omitempty"`
	ErrorLog        string                 `protobuf:"bytes,17,opt,name=error_log,json=errorLog,proto3" json:"error_log,omitempty"`
	FutureTaskIndex string                 `protobuf:"bytes,18,opt,name=future_task_index,json=futureTaskIndex,proto3" json:"future_task_index,omitempty"`
	TotalRuns       uint64                 `protobuf:"varint,19,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blit_blit_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_blit_blit_task_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Task) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetActivateAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivateAfter
	}
	return nil
}

func (x *Task) GetExpireAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAfter
	}
	return nil
}

func (x *Task) GetMinimumInterval() *durationpb.Duration {
	if x != nil {
		return x.MinimumInterval
	}
	return nil
}

func (x *Task) GetMaxRuns() uint64 {
	if x != nil {
		return x.MaxRuns
	}
	return 0
}

func (x *Task) GetDisableOnError() bool {
	if x != nil {
		return x.DisableOnError
	}
	return false
}

func (x *Task) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Task) GetTaskGasLimit() uint64 {
	if x != nil {
		return x.TaskGasLimit
	}
	return 0
}

func (x *Task) GetTaskGasFee() *v1beta11.Coin {
	if x != nil {
		return x.TaskGasFee
	}
	return nil
}

func (x *Task) GetMessages() []*anypb.Any {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Task) GetResults() []*v1beta1.Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Task) GetLastExecutedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.LastExecutedOn
	}
	return nil
}

func (x *Task) GetErrorLog() string {
	if x != nil {
		return x.ErrorLog
	}
	return ""
}

func (x *Task) GetFutureTaskIndex() string {
	if x != nil {
		return x.FutureTaskIndex
	}
	return ""
}

func (x *Task) GetTotalRuns() uint64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

var File_blit_blit_task_proto protoreflect.FileDescriptor

var file_blit_blit_task_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x6c, 0x69, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x6c, 0x69, 0x74, 0x2e, 0x62, 0x6c, 0x69,
	0x74, 0x1a, 0x23, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x61,
	0x62, 0x63, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61, 0x62, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x96, 0x06, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2,
	0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x98, 0xdf, 0x1f,
	0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x47,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x47, 0x61, 0x73, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x61, 0x62, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x6f,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x42, 0x7b, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x69, 0x74, 0x2e, 0x62, 0x6c, 0x69, 0x74, 0x42, 0x09, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6c, 0x69,
	0x74, 0x2f, 0x62, 0x6c, 0x69, 0x74, 0xa2, 0x02, 0x03, 0x42, 0x42, 0x58, 0xaa, 0x02, 0x09, 0x42,
	0x6c, 0x69, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x74, 0xca, 0x02, 0x09, 0x42, 0x6c, 0x69, 0x74, 0x5c,
	0x42, 0x6c, 0x69, 0x74, 0xe2, 0x02, 0x15, 0x42, 0x6c, 0x69, 0x74, 0x5c, 0x42, 0x6c, 0x69, 0x74,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x42,
	0x6c, 0x69, 0x74, 0x3a, 0x3a, 0x42, 0x6c, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_blit_blit_task_proto_rawDescOnce sync.Once
	file_blit_blit_task_proto_rawDescData = file_blit_blit_task_proto_rawDesc
)

func file_blit_blit_task_proto_rawDescGZIP() []byte {
	file_blit_blit_task_proto_rawDescOnce.Do(func() {
		file_blit_blit_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_blit_blit_task_proto_rawDescData)
	})
	return file_blit_blit_task_proto_rawDescData
}

var file_blit_blit_task_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_blit_blit_task_proto_goTypes = []interface{}{
	(*Task)(nil),                  // 0: blit.blit.Task
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 2: google.protobuf.Duration
	(*v1beta11.Coin)(nil),         // 3: cosmos.base.v1beta1.Coin
	(*anypb.Any)(nil),             // 4: google.protobuf.Any
	(*v1beta1.Result)(nil),        // 5: cosmos.base.abci.v1beta1.Result
}
var file_blit_blit_task_proto_depIdxs = []int32{
	1, // 0: blit.blit.Task.activate_after:type_name -> google.protobuf.Timestamp
	1, // 1: blit.blit.Task.expire_after:type_name -> google.protobuf.Timestamp
	2, // 2: blit.blit.Task.minimum_interval:type_name -> google.protobuf.Duration
	3, // 3: blit.blit.Task.task_gas_fee:type_name -> cosmos.base.v1beta1.Coin
	4, // 4: blit.blit.Task.messages:type_name -> google.protobuf.Any
	5, // 5: blit.blit.Task.results:type_name -> cosmos.base.abci.v1beta1.Result
	1, // 6: blit.blit.Task.last_executed_on:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_blit_blit_task_proto_init() }
func file_blit_blit_task_proto_init() {
	if File_blit_blit_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blit_blit_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blit_blit_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blit_blit_task_proto_goTypes,
		DependencyIndexes: file_blit_blit_task_proto_depIdxs,
		MessageInfos:      file_blit_blit_task_proto_msgTypes,
	}.Build()
	File_blit_blit_task_proto = out.File
	file_blit_blit_task_proto_rawDesc = nil
	file_blit_blit_task_proto_goTypes = nil
	file_blit_blit_task_proto_depIdxs = nil
}
