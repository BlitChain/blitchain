// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package blit

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Task                     protoreflect.MessageDescriptor
	fd_Task_index               protoreflect.FieldDescriptor
	fd_Task_taskId              protoreflect.FieldDescriptor
	fd_Task_totalRunCount       protoreflect.FieldDescriptor
	fd_Task_nextTaskResultIndex protoreflect.FieldDescriptor
	fd_Task_activateOn          protoreflect.FieldDescriptor
	fd_Task_expireOn            protoreflect.FieldDescriptor
	fd_Task_interval            protoreflect.FieldDescriptor
	fd_Task_maxRuns             protoreflect.FieldDescriptor
	fd_Task_disableOnError      protoreflect.FieldDescriptor
	fd_Task_enabled             protoreflect.FieldDescriptor
	fd_Task_gasLimit            protoreflect.FieldDescriptor
	fd_Task_gasPrice            protoreflect.FieldDescriptor
	fd_Task_messagesMo          protoreflect.FieldDescriptor
	fd_Task_dule                protoreflect.FieldDescriptor
	fd_Task_blit                protoreflect.FieldDescriptor
	fd_Task_creator             protoreflect.FieldDescriptor
)

func init() {
	file_blit_blit_task_proto_init()
	md_Task = File_blit_blit_task_proto.Messages().ByName("Task")
	fd_Task_index = md_Task.Fields().ByName("index")
	fd_Task_taskId = md_Task.Fields().ByName("taskId")
	fd_Task_totalRunCount = md_Task.Fields().ByName("totalRunCount")
	fd_Task_nextTaskResultIndex = md_Task.Fields().ByName("nextTaskResultIndex")
	fd_Task_activateOn = md_Task.Fields().ByName("activateOn")
	fd_Task_expireOn = md_Task.Fields().ByName("expireOn")
	fd_Task_interval = md_Task.Fields().ByName("interval")
	fd_Task_maxRuns = md_Task.Fields().ByName("maxRuns")
	fd_Task_disableOnError = md_Task.Fields().ByName("disableOnError")
	fd_Task_enabled = md_Task.Fields().ByName("enabled")
	fd_Task_gasLimit = md_Task.Fields().ByName("gasLimit")
	fd_Task_gasPrice = md_Task.Fields().ByName("gasPrice")
	fd_Task_messagesMo = md_Task.Fields().ByName("messagesMo")
	fd_Task_dule = md_Task.Fields().ByName("dule")
	fd_Task_blit = md_Task.Fields().ByName("blit")
	fd_Task_creator = md_Task.Fields().ByName("creator")
}

var _ protoreflect.Message = (*fastReflection_Task)(nil)

type fastReflection_Task Task

func (x *Task) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Task)(x)
}

func (x *Task) slowProtoReflect() protoreflect.Message {
	mi := &file_blit_blit_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Task_messageType fastReflection_Task_messageType
var _ protoreflect.MessageType = fastReflection_Task_messageType{}

type fastReflection_Task_messageType struct{}

func (x fastReflection_Task_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Task)(nil)
}
func (x fastReflection_Task_messageType) New() protoreflect.Message {
	return new(fastReflection_Task)
}
func (x fastReflection_Task_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Task
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Task) Descriptor() protoreflect.MessageDescriptor {
	return md_Task
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Task) Type() protoreflect.MessageType {
	return _fastReflection_Task_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Task) New() protoreflect.Message {
	return new(fastReflection_Task)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Task) Interface() protoreflect.ProtoMessage {
	return (*Task)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Task) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_Task_index, value) {
			return
		}
	}
	if x.TaskId != int32(0) {
		value := protoreflect.ValueOfInt32(x.TaskId)
		if !f(fd_Task_taskId, value) {
			return
		}
	}
	if x.TotalRunCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.TotalRunCount)
		if !f(fd_Task_totalRunCount, value) {
			return
		}
	}
	if x.NextTaskResultIndex != "" {
		value := protoreflect.ValueOfString(x.NextTaskResultIndex)
		if !f(fd_Task_nextTaskResultIndex, value) {
			return
		}
	}
	if x.ActivateOn != "" {
		value := protoreflect.ValueOfString(x.ActivateOn)
		if !f(fd_Task_activateOn, value) {
			return
		}
	}
	if x.ExpireOn != "" {
		value := protoreflect.ValueOfString(x.ExpireOn)
		if !f(fd_Task_expireOn, value) {
			return
		}
	}
	if x.Interval != "" {
		value := protoreflect.ValueOfString(x.Interval)
		if !f(fd_Task_interval, value) {
			return
		}
	}
	if x.MaxRuns != int32(0) {
		value := protoreflect.ValueOfInt32(x.MaxRuns)
		if !f(fd_Task_maxRuns, value) {
			return
		}
	}
	if x.DisableOnError != false {
		value := protoreflect.ValueOfBool(x.DisableOnError)
		if !f(fd_Task_disableOnError, value) {
			return
		}
	}
	if x.Enabled != false {
		value := protoreflect.ValueOfBool(x.Enabled)
		if !f(fd_Task_enabled, value) {
			return
		}
	}
	if x.GasLimit != int32(0) {
		value := protoreflect.ValueOfInt32(x.GasLimit)
		if !f(fd_Task_gasLimit, value) {
			return
		}
	}
	if x.GasPrice != "" {
		value := protoreflect.ValueOfString(x.GasPrice)
		if !f(fd_Task_gasPrice, value) {
			return
		}
	}
	if x.MessagesMo != "" {
		value := protoreflect.ValueOfString(x.MessagesMo)
		if !f(fd_Task_messagesMo, value) {
			return
		}
	}
	if x.Dule != "" {
		value := protoreflect.ValueOfString(x.Dule)
		if !f(fd_Task_dule, value) {
			return
		}
	}
	if x.Blit != "" {
		value := protoreflect.ValueOfString(x.Blit)
		if !f(fd_Task_blit, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Task_creator, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Task) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "blit.blit.Task.index":
		return x.Index != ""
	case "blit.blit.Task.taskId":
		return x.TaskId != int32(0)
	case "blit.blit.Task.totalRunCount":
		return x.TotalRunCount != int32(0)
	case "blit.blit.Task.nextTaskResultIndex":
		return x.NextTaskResultIndex != ""
	case "blit.blit.Task.activateOn":
		return x.ActivateOn != ""
	case "blit.blit.Task.expireOn":
		return x.ExpireOn != ""
	case "blit.blit.Task.interval":
		return x.Interval != ""
	case "blit.blit.Task.maxRuns":
		return x.MaxRuns != int32(0)
	case "blit.blit.Task.disableOnError":
		return x.DisableOnError != false
	case "blit.blit.Task.enabled":
		return x.Enabled != false
	case "blit.blit.Task.gasLimit":
		return x.GasLimit != int32(0)
	case "blit.blit.Task.gasPrice":
		return x.GasPrice != ""
	case "blit.blit.Task.messagesMo":
		return x.MessagesMo != ""
	case "blit.blit.Task.dule":
		return x.Dule != ""
	case "blit.blit.Task.blit":
		return x.Blit != ""
	case "blit.blit.Task.creator":
		return x.Creator != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "blit.blit.Task.index":
		x.Index = ""
	case "blit.blit.Task.taskId":
		x.TaskId = int32(0)
	case "blit.blit.Task.totalRunCount":
		x.TotalRunCount = int32(0)
	case "blit.blit.Task.nextTaskResultIndex":
		x.NextTaskResultIndex = ""
	case "blit.blit.Task.activateOn":
		x.ActivateOn = ""
	case "blit.blit.Task.expireOn":
		x.ExpireOn = ""
	case "blit.blit.Task.interval":
		x.Interval = ""
	case "blit.blit.Task.maxRuns":
		x.MaxRuns = int32(0)
	case "blit.blit.Task.disableOnError":
		x.DisableOnError = false
	case "blit.blit.Task.enabled":
		x.Enabled = false
	case "blit.blit.Task.gasLimit":
		x.GasLimit = int32(0)
	case "blit.blit.Task.gasPrice":
		x.GasPrice = ""
	case "blit.blit.Task.messagesMo":
		x.MessagesMo = ""
	case "blit.blit.Task.dule":
		x.Dule = ""
	case "blit.blit.Task.blit":
		x.Blit = ""
	case "blit.blit.Task.creator":
		x.Creator = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Task) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "blit.blit.Task.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.taskId":
		value := x.TaskId
		return protoreflect.ValueOfInt32(value)
	case "blit.blit.Task.totalRunCount":
		value := x.TotalRunCount
		return protoreflect.ValueOfInt32(value)
	case "blit.blit.Task.nextTaskResultIndex":
		value := x.NextTaskResultIndex
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.activateOn":
		value := x.ActivateOn
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.expireOn":
		value := x.ExpireOn
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.interval":
		value := x.Interval
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.maxRuns":
		value := x.MaxRuns
		return protoreflect.ValueOfInt32(value)
	case "blit.blit.Task.disableOnError":
		value := x.DisableOnError
		return protoreflect.ValueOfBool(value)
	case "blit.blit.Task.enabled":
		value := x.Enabled
		return protoreflect.ValueOfBool(value)
	case "blit.blit.Task.gasLimit":
		value := x.GasLimit
		return protoreflect.ValueOfInt32(value)
	case "blit.blit.Task.gasPrice":
		value := x.GasPrice
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.messagesMo":
		value := x.MessagesMo
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.dule":
		value := x.Dule
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.blit":
		value := x.Blit
		return protoreflect.ValueOfString(value)
	case "blit.blit.Task.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "blit.blit.Task.index":
		x.Index = value.Interface().(string)
	case "blit.blit.Task.taskId":
		x.TaskId = int32(value.Int())
	case "blit.blit.Task.totalRunCount":
		x.TotalRunCount = int32(value.Int())
	case "blit.blit.Task.nextTaskResultIndex":
		x.NextTaskResultIndex = value.Interface().(string)
	case "blit.blit.Task.activateOn":
		x.ActivateOn = value.Interface().(string)
	case "blit.blit.Task.expireOn":
		x.ExpireOn = value.Interface().(string)
	case "blit.blit.Task.interval":
		x.Interval = value.Interface().(string)
	case "blit.blit.Task.maxRuns":
		x.MaxRuns = int32(value.Int())
	case "blit.blit.Task.disableOnError":
		x.DisableOnError = value.Bool()
	case "blit.blit.Task.enabled":
		x.Enabled = value.Bool()
	case "blit.blit.Task.gasLimit":
		x.GasLimit = int32(value.Int())
	case "blit.blit.Task.gasPrice":
		x.GasPrice = value.Interface().(string)
	case "blit.blit.Task.messagesMo":
		x.MessagesMo = value.Interface().(string)
	case "blit.blit.Task.dule":
		x.Dule = value.Interface().(string)
	case "blit.blit.Task.blit":
		x.Blit = value.Interface().(string)
	case "blit.blit.Task.creator":
		x.Creator = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "blit.blit.Task.index":
		panic(fmt.Errorf("field index of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.taskId":
		panic(fmt.Errorf("field taskId of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.totalRunCount":
		panic(fmt.Errorf("field totalRunCount of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.nextTaskResultIndex":
		panic(fmt.Errorf("field nextTaskResultIndex of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.activateOn":
		panic(fmt.Errorf("field activateOn of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.expireOn":
		panic(fmt.Errorf("field expireOn of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.interval":
		panic(fmt.Errorf("field interval of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.maxRuns":
		panic(fmt.Errorf("field maxRuns of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.disableOnError":
		panic(fmt.Errorf("field disableOnError of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.enabled":
		panic(fmt.Errorf("field enabled of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.gasLimit":
		panic(fmt.Errorf("field gasLimit of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.gasPrice":
		panic(fmt.Errorf("field gasPrice of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.messagesMo":
		panic(fmt.Errorf("field messagesMo of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.dule":
		panic(fmt.Errorf("field dule of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.blit":
		panic(fmt.Errorf("field blit of message blit.blit.Task is not mutable"))
	case "blit.blit.Task.creator":
		panic(fmt.Errorf("field creator of message blit.blit.Task is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Task) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "blit.blit.Task.index":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.taskId":
		return protoreflect.ValueOfInt32(int32(0))
	case "blit.blit.Task.totalRunCount":
		return protoreflect.ValueOfInt32(int32(0))
	case "blit.blit.Task.nextTaskResultIndex":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.activateOn":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.expireOn":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.interval":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.maxRuns":
		return protoreflect.ValueOfInt32(int32(0))
	case "blit.blit.Task.disableOnError":
		return protoreflect.ValueOfBool(false)
	case "blit.blit.Task.enabled":
		return protoreflect.ValueOfBool(false)
	case "blit.blit.Task.gasLimit":
		return protoreflect.ValueOfInt32(int32(0))
	case "blit.blit.Task.gasPrice":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.messagesMo":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.dule":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.blit":
		return protoreflect.ValueOfString("")
	case "blit.blit.Task.creator":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: blit.blit.Task"))
		}
		panic(fmt.Errorf("message blit.blit.Task does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Task) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in blit.blit.Task", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Task) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Task) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Task) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Task) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TaskId != 0 {
			n += 1 + runtime.Sov(uint64(x.TaskId))
		}
		if x.TotalRunCount != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalRunCount))
		}
		l = len(x.NextTaskResultIndex)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ActivateOn)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExpireOn)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Interval)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxRuns != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxRuns))
		}
		if x.DisableOnError {
			n += 2
		}
		if x.Enabled {
			n += 2
		}
		if x.GasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.GasLimit))
		}
		l = len(x.GasPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MessagesMo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Dule)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Blit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.Blit) > 0 {
			i -= len(x.Blit)
			copy(dAtA[i:], x.Blit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Blit)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.Dule) > 0 {
			i -= len(x.Dule)
			copy(dAtA[i:], x.Dule)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Dule)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.MessagesMo) > 0 {
			i -= len(x.MessagesMo)
			copy(dAtA[i:], x.MessagesMo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MessagesMo)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.GasPrice) > 0 {
			i -= len(x.GasPrice)
			copy(dAtA[i:], x.GasPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasPrice)))
			i--
			dAtA[i] = 0x62
		}
		if x.GasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasLimit))
			i--
			dAtA[i] = 0x58
		}
		if x.Enabled {
			i--
			if x.Enabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x50
		}
		if x.DisableOnError {
			i--
			if x.DisableOnError {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x48
		}
		if x.MaxRuns != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxRuns))
			i--
			dAtA[i] = 0x40
		}
		if len(x.Interval) > 0 {
			i -= len(x.Interval)
			copy(dAtA[i:], x.Interval)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Interval)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.ExpireOn) > 0 {
			i -= len(x.ExpireOn)
			copy(dAtA[i:], x.ExpireOn)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExpireOn)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ActivateOn) > 0 {
			i -= len(x.ActivateOn)
			copy(dAtA[i:], x.ActivateOn)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ActivateOn)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.NextTaskResultIndex) > 0 {
			i -= len(x.NextTaskResultIndex)
			copy(dAtA[i:], x.NextTaskResultIndex)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NextTaskResultIndex)))
			i--
			dAtA[i] = 0x22
		}
		if x.TotalRunCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalRunCount))
			i--
			dAtA[i] = 0x18
		}
		if x.TaskId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TaskId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Task)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Task: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
				}
				x.TaskId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TaskId |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalRunCount", wireType)
				}
				x.TotalRunCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalRunCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NextTaskResultIndex", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NextTaskResultIndex = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActivateOn", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ActivateOn = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpireOn", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExpireOn = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Interval = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxRuns", wireType)
				}
				x.MaxRuns = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxRuns |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisableOnError", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DisableOnError = bool(v != 0)
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Enabled = bool(v != 0)
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
				}
				x.GasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasLimit |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MessagesMo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MessagesMo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Dule", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Dule = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Blit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Blit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: blit/blit/task.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index               string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	TaskId              int32  `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	TotalRunCount       int32  `protobuf:"varint,3,opt,name=totalRunCount,proto3" json:"totalRunCount,omitempty"`
	NextTaskResultIndex string `protobuf:"bytes,4,opt,name=nextTaskResultIndex,proto3" json:"nextTaskResultIndex,omitempty"`
	ActivateOn          string `protobuf:"bytes,5,opt,name=activateOn,proto3" json:"activateOn,omitempty"`
	ExpireOn            string `protobuf:"bytes,6,opt,name=expireOn,proto3" json:"expireOn,omitempty"`
	Interval            string `protobuf:"bytes,7,opt,name=interval,proto3" json:"interval,omitempty"`
	MaxRuns             int32  `protobuf:"varint,8,opt,name=maxRuns,proto3" json:"maxRuns,omitempty"`
	DisableOnError      bool   `protobuf:"varint,9,opt,name=disableOnError,proto3" json:"disableOnError,omitempty"`
	Enabled             bool   `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	GasLimit            int32  `protobuf:"varint,11,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasPrice            string `protobuf:"bytes,12,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	MessagesMo          string `protobuf:"bytes,13,opt,name=messagesMo,proto3" json:"messagesMo,omitempty"`
	Dule                string `protobuf:"bytes,14,opt,name=dule,proto3" json:"dule,omitempty"`
	Blit                string `protobuf:"bytes,15,opt,name=blit,proto3" json:"blit,omitempty"`
	Creator             string `protobuf:"bytes,16,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blit_blit_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_blit_blit_task_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Task) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Task) GetTotalRunCount() int32 {
	if x != nil {
		return x.TotalRunCount
	}
	return 0
}

func (x *Task) GetNextTaskResultIndex() string {
	if x != nil {
		return x.NextTaskResultIndex
	}
	return ""
}

func (x *Task) GetActivateOn() string {
	if x != nil {
		return x.ActivateOn
	}
	return ""
}

func (x *Task) GetExpireOn() string {
	if x != nil {
		return x.ExpireOn
	}
	return ""
}

func (x *Task) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *Task) GetMaxRuns() int32 {
	if x != nil {
		return x.MaxRuns
	}
	return 0
}

func (x *Task) GetDisableOnError() bool {
	if x != nil {
		return x.DisableOnError
	}
	return false
}

func (x *Task) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Task) GetGasLimit() int32 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Task) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *Task) GetMessagesMo() string {
	if x != nil {
		return x.MessagesMo
	}
	return ""
}

func (x *Task) GetDule() string {
	if x != nil {
		return x.Dule
	}
	return ""
}

func (x *Task) GetBlit() string {
	if x != nil {
		return x.Blit
	}
	return ""
}

func (x *Task) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

var File_blit_blit_task_proto protoreflect.FileDescriptor

var file_blit_blit_task_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x6c, 0x69, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x6c, 0x69, 0x74, 0x2e, 0x62, 0x6c, 0x69,
	0x74, 0x22, 0xda, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x78,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x52,
	0x75, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x75,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6c, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x7b,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x69, 0x74, 0x2e, 0x62, 0x6c, 0x69, 0x74, 0x42,
	0x09, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x6c, 0x69, 0x74, 0x2f, 0x62, 0x6c, 0x69, 0x74, 0xa2, 0x02, 0x03, 0x42, 0x42, 0x58, 0xaa, 0x02,
	0x09, 0x42, 0x6c, 0x69, 0x74, 0x2e, 0x42, 0x6c, 0x69, 0x74, 0xca, 0x02, 0x09, 0x42, 0x6c, 0x69,
	0x74, 0x5c, 0x42, 0x6c, 0x69, 0x74, 0xe2, 0x02, 0x15, 0x42, 0x6c, 0x69, 0x74, 0x5c, 0x42, 0x6c,
	0x69, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0a, 0x42, 0x6c, 0x69, 0x74, 0x3a, 0x3a, 0x42, 0x6c, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_blit_blit_task_proto_rawDescOnce sync.Once
	file_blit_blit_task_proto_rawDescData = file_blit_blit_task_proto_rawDesc
)

func file_blit_blit_task_proto_rawDescGZIP() []byte {
	file_blit_blit_task_proto_rawDescOnce.Do(func() {
		file_blit_blit_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_blit_blit_task_proto_rawDescData)
	})
	return file_blit_blit_task_proto_rawDescData
}

var file_blit_blit_task_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_blit_blit_task_proto_goTypes = []interface{}{
	(*Task)(nil), // 0: blit.blit.Task
}
var file_blit_blit_task_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_blit_blit_task_proto_init() }
func file_blit_blit_task_proto_init() {
	if File_blit_blit_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blit_blit_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blit_blit_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blit_blit_task_proto_goTypes,
		DependencyIndexes: file_blit_blit_task_proto_depIdxs,
		MessageInfos:      file_blit_blit_task_proto_msgTypes,
	}.Build()
	File_blit_blit_task_proto = out.File
	file_blit_blit_task_proto_rawDesc = nil
	file_blit_blit_task_proto_goTypes = nil
	file_blit_blit_task_proto_depIdxs = nil
}
